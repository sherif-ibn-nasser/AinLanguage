تخصيص متغير أول_عنوان=0L
تخصيص متغير آخر_عنوان=0L
تخصيص ثابت التنسيق=8L
تخصيص ثابت حجم_البيانات_الوصفية=8L

دالة تنسيق_الحجم(الحجم:كبير):كبير{
	أرجع (الحجم+التنسيق-1)&~(التنسيق-1)
}

دالة انسخ(من:كبير، إلى:كبير، العدد:كبير){

	متغير ن=0L
	
	طالما(ن<العدد)
		اكتب(إلى+ن، اقرأ_بايت(من+ن++))
	
}

دالة اجعل_أصفار(العنوان:كبير، العدد:كبير){

	متغير ن=0L
	
	طالما(ن<العدد)
		اكتب(العنوان+ن++،00b)
	
}
/**
 * حجز مساحة من الذاكرة بمعلومية الحجم بالبايت
 */
 
دالة احجز(الحجم_بالبايت:كبير):كبير{
	ثابت الحجم_المنسق=تنسيق_الحجم(الحجم_بالبايت)
	ثابت الحجم_المطلوب=الحجم_المنسق+2*حجم_البيانات_الوصفية
	ثابت البيانات_الوصفية=الحجم_المطلوب|1L // إضافة واحد لجعله مشغولاً
	
	متغير العنوان=أول_عنوان
	
	طالما(العنوان<آخر_عنوان){
	
		ثابت البيانات_الوصفية_المقروءة=اقرأ_كبير(العنوان)
		ثابت مشغول=(البيانات_الوصفية_المقروءة&1L) == 1L
		ثابت الحجم_المقروء=البيانات_الوصفية_المقروءة & ~1L
		ثابت الحجم_المتبقي=الحجم_المقروء-الحجم_المطلوب
		
		/* لو مشغول
		 * أو الحجم المقروء صغير ولا يكفي، يعني الحجم المتبقي بالسالب
		 * أو أن الحجم المقروء أكبر من الحجم المطلوب،
		 * ولكن لا يمكن أن يتم تقسيمه بحيث الجزء المتبقي يمكن أن يخزن 8 بايت على الأقل + 16 بايت للبيانات الوصفية
		 */
		 
		 
		 لو(مشغول || الحجم_المتبقي<0L || الحجم_المتبقي>0L && الحجم_المتبقي<24L ){
		 	العنوان+=الحجم_المقروء
		 	أعد
		 }
		 
		 // تخزين البيانات الوصفية
		 اكتب(العنوان، البيانات_الوصفية)
		 اكتب(العنوان+الحجم_المطلوب-8، البيانات_الوصفية)
		 
		// تقسيم المساحة المتبقية
		 لو(الحجم_المتبقي>0L){
		 	اكتب(العنوان+الحجم_المطلوب، الحجم_المتبقي)
		 	اكتب(العنوان+الحجم_المطلوب+الحجم_المتبقي-8، الحجم_المتبقي)
		 }
		 
		 أرجع العنوان+8
	}
	
	// حجز مساحة إضافية في الذاكرة
	ثابت أول_عنوان_هو_صفر=أول_عنوان==0L
	متغير حجم_التالي=الحجم_المطلوب
	
	لو(أول_عنوان_هو_صفر){
		أول_عنوان=إزاحة_الذاكرة(0L)
		العنوان=أول_عنوان
	}
	// تأكد من دمج المساحة السابقة إن كانت فارغة مع المساحة المزاحة، هذا يجعل المساحة المطلوبة تلي آخر مساحة مشغولة
	وإلا{
		العنوان=آخر_عنوان
		ثابت البيانات_الوصفية_للسابق=اقرأ_كبير(العنوان-8)
		ثابت السابق_فارغ=(البيانات_الوصفية_للسابق&1L) != 1L
		لو(السابق_فارغ){
			ثابت حجم_السابق=البيانات_الوصفية_للسابق& ~1L
			العنوان-=حجم_السابق
			حجم_التالي+=حجم_السابق
		}
	}
	
	آخر_عنوان=إزاحة_الذاكرة(الحجم_المطلوب*2) // حجز ضعف الحجم المطلوب
	
	اكتب(العنوان، البيانات_الوصفية)
	اكتب(العنوان+8+الحجم_المنسق، البيانات_الوصفية)
	
	
	اكتب(العنوان+الحجم_المطلوب، حجم_التالي)
	اكتب(العنوان+الحجم_المطلوب+حجم_التالي-8، حجم_التالي)
	أرجع العنوان+8
	
}

/**
 * تفريغ مساحة من خلال عنوان أول بايت
 */
 
دالة تفريغ(العنوان:كبير){

	متغير العنوان_النهائي=العنوان-8

 	ثابت البيانات_الوصفية=اقرأ_كبير(العنوان_النهائي)
 	ثابت الحجم=البيانات_الوصفية& ~1L

 	متغير البيانات_الوصفية_النهائية=الحجم // سنقوم بعدها بزيادة الحجم للسابق أو التالي إن كانا فارغين
 	متغير السابق_فارغ=خطأ
 	متغير التالي_فارغ=خطأ
 	
 	لو(العنوان_النهائي-8>أول_عنوان){ // يوجد سابق
 	
 		ثابت البيانات_الوصفية_للسابق=اقرأ_كبير(العنوان_النهائي-8)
		السابق_فارغ=(البيانات_الوصفية_للسابق&1L) != 1L
		لو(السابق_فارغ){
			ثابت حجم_السابق=البيانات_الوصفية_للسابق& ~1L
			البيانات_الوصفية_النهائية+=حجم_السابق
			العنوان_النهائي-=حجم_السابق
		}
 	}
 	
 	لو(العنوان_النهائي+البيانات_الوصفية_النهائية<آخر_عنوان){ // يوجد ما يليه
 		ثابت البيانات_الوصفية_للتالي=اقرأ_كبير(العنوان_النهائي+البيانات_الوصفية_النهائية)
 		التالي_فارغ=(البيانات_الوصفية_للتالي&1L) != 1L
 		لو(التالي_فارغ){
			ثابت حجم_التالي=البيانات_الوصفية_للتالي&~1L
			البيانات_الوصفية_النهائية+=حجم_التالي
		}
 	}
 	
 	
 	اكتب(العنوان_النهائي، البيانات_الوصفية_النهائية)
	اكتب(العنوان_النهائي+البيانات_الوصفية_النهائية-8، البيانات_الوصفية_النهائية)
 	
 }
 
 /**
  * إعادة حجز مؤشر بحجم جديد
  * سيحاول استخدام التالي إن كان فارغاً وحجمه يكفي لضمه مع الحالي(تمدد دون حجز ودون نسخ المحتوى)
  * إن كان الحجم الكلي أقل من المطلوب أو لم يكن فارغاً، سيحاول استخدام السابق إن كان فارغاً، أو هما معاً وسيقوم بنسخ المحتوى إن كان السابق فارغاً (تمدد دون حجز ومع نسخ المحتوى)
  * إن لم يكن بعد ذلك الحجم المتوفر الكلي كافياً، فسيتم حجز مساحة جديدة إذا كان التالي فارغاً أو الحالي يقع في آخر الذاكرة قبل حجز المساحة الجديدة (تمدد مع الحجز دون نسخ المحتوي)
  * وإلا سيقوم بنقل المحتوى للذاكرة الجديدة وتفريغ الحالي (حجز مع نسخ المحتوى)
  */
 
 دالة إعادة_حجز(العنوان:كبير، الحجم_الجديد_بالبايت:كبير):كبير{
 	
 	ثابت عنوان_الحالي=العنوان-8
 	ثابت الحجم_المنسق=تنسيق_الحجم(الحجم_الجديد_بالبايت)
	ثابت الحجم_المطلوب=الحجم_المنسق+2*حجم_البيانات_الوصفية
	ثابت البيانات_الوصفية=الحجم_المطلوب|1L // إضافة واحد لجعله مشغولاً
	
	ثابت البيانات_الوصفية_المقروءة_للحالي=اقرأ_كبير(عنوان_الحالي)
	ثابت الحجم_المقروء_للحالي=البيانات_الوصفية_المقروءة_للحالي&~1L
	
	لو (الحجم_المقروء_للحالي>=الحجم_المطلوب)
		أرجع العنوان
		
	متغير العنوان_النهائي=عنوان_الحالي
	
	// سنقوم بزيادته عندما يكون التالي فارغاً أو السابق أو الاثنين معاً، ثم مقارنته ما إذا كان يكفي لإعادة الحجز قبل البحث عن مكان فارغ في الذاكرة
	متغير الحجم_المتوفر=الحجم_المقروء_للحالي
	متغير عنوان_التالي=عنوان_الحالي+الحجم_المقروء_للحالي
	متغير حجم_التالي=0L
	متغير السابق_فارغ=خطأ
 	متغير التالي_فارغ=خطأ
 	
 	لو(عنوان_التالي<آخر_عنوان){ // يوجد ما يليه
 		ثابت البيانات_الوصفية_للتالي=اقرأ_كبير(عنوان_التالي)
		التالي_فارغ=(البيانات_الوصفية_للتالي&1L) != 1L
		لو(التالي_فارغ){
			حجم_التالي=البيانات_الوصفية_للتالي&~1L
			الحجم_المتوفر+=حجم_التالي
		}
			
 	}
 	
 	لو(الحجم_المتوفر<الحجم_المطلوب&&العنوان_النهائي-8>أول_عنوان){ // يوجد سابق
 		ثابت البيانات_الوصفية_للسابق=اقرأ_كبير(العنوان_النهائي-8)
		السابق_فارغ=(البيانات_الوصفية_للسابق&1L) != 1L
		لو(السابق_فارغ){
			ثابت حجم_السابق=البيانات_الوصفية_للسابق& ~1L
			العنوان_النهائي-=حجم_السابق  // إنقاص الحجم للسابق
			الحجم_المتوفر+=حجم_السابق // زيادة الحجم المتوفر بحجم السابق
		}
 	}
 	
 	متغير الحجم_المتبقي=الحجم_المتوفر-الحجم_المطلوب
 	
 	// عندما يمكن دمج الحالي مع السابق أو مع التالي أو كليهما دون حجز مساحة جديدة
 	لو(الحجم_المتبقي>=24L || الحجم_المتبقي==0L){
 		لو(السابق_فارغ)
 			// يجب نسخ المحتوى
 			انسخ(عنوان_الحالي+8، العنوان_النهائي+8، الحجم_المقروء_للحالي-16)
 		
 		ثابت عنوان_التالي_الجديد=العنوان_النهائي+الحجم_المطلوب
 		
 		اكتب(العنوان_النهائي، البيانات_الوصفية)
 		اكتب(عنوان_التالي_الجديد-8، البيانات_الوصفية)
 		
 		لو(الحجم_المتبقي!=0L){
 			اكتب(عنوان_التالي_الجديد، الحجم_المتبقي)
 			اكتب(عنوان_التالي_الجديد+الحجم_المتبقي-8، الحجم_المتبقي)
 		}
 		أرجع العنوان_النهائي+8
 	}
 	
 	// عندما يكون التالي فارغاً وهو آخر الذاكرة أو الحالي في آخر الذاكرة قبل حجز مساحة جديدة
 	لو(التالي_فارغ&&عنوان_التالي+حجم_التالي==آخر_عنوان || عنوان_التالي==آخر_عنوان){
 		ثابت عنوان_التالي_الجديد=عنوان_الحالي+الحجم_المطلوب
 		الحجم_المتبقي=آخر_عنوان-عنوان_الحالي+الحجم_المطلوب // هو الحجم المحجوز (ضعف الحجم_المطلوب) زائد الحجم قبل الزيادة (سواء كان التالي فارغاً أو الحالي في آخر الذاكرة) ناقص الحجم_الطلوب
 		آخر_عنوان=إزاحة_الذاكرة(الحجم_المطلوب*2) // حجز ضعف الحجم المطلوب
 		
 		
 		اكتب(عنوان_الحالي، البيانات_الوصفية)
 		اكتب(عنوان_التالي_الجديد-8، البيانات_الوصفية)
 		
 		اكتب(عنوان_التالي_الجديد، الحجم_المتبقي)
 		اكتب(عنوان_التالي_الجديد+الحجم_المتبقي-8، الحجم_المتبقي)
 	
 		أرجع العنوان // المرسل
 	
 	}
 	
 	ثابت العنوان_الجديد=احجز(الحجم_الجديد_بالبايت)
 	
 	انسخ(العنوان، العنوان_الجديد، الحجم_المقروء_للحالي-16)
 	
 	تفريغ(العنوان)
 	
 	أرجع العنوان_الجديد
 	
 }
 
 /**
 * سيتم استقبال الأبعاد كمصفوفة من نوع كبير عند التنفيذ بلغة التجميع، هذا للاستغناء عن تحويلها من كبير_م إلى كبير، فاللغة قد صُممت لتكون الأبعاد من نوع كبير_م 
 * حجم_العنصر هو حجم النوع الذي تحمله المصفوفة، مثلاً عند تعريف مصفوفة [[صحيح]] فإن حجم العنصر هو حجم النوع صحيح وهو 4 بايت 
*/


/**
 * قم بتجربة حساب الحجم_المطلوب يدوياً وقارنه مع القيمة المحسوبة. قم باتباع النمط الذي بالأسفل.
 * قم بإضافة 16 بايت للبيانات الوصفية المُضافة من دالة 'احجز(الحجم_بالبايت:كبير):كبير'.
 * كل مصفوفة تُمثّل ب 16 بايت للبيانات الوصفية + 8 بايت للحجم + عدد العناصر للمصفوفة * حجم العنصر (حجم العنصر الحقيقى إن كانت المصفوفة ذات البعد الأخير).
 
   a :  8 | 8 |  a0  |  a1  | 8 => 24+2*8 = 40
   
  a0 :  8 | 8 | a00 | a01 | a02 | 8 => 24+3*8 = 48
  a1 :  8 | 8 | a10 | a11 | a12 | 8 => 24+3*8 = 48
  
  a00:  8 | 8 | a000 | a001 | a002 | a003 | 8 => 24+align(4*8) = 56
  a01:  8 | 8 | a010 | a011 | a012 | a013 | 8 => 24+align(4*8) = 56
  a02:  8 | 8 | a020 | a021 | a022 | a023 | 8 => 24+align(4*8) = 56
  a10:  8 | 8 | a100 | a101 | a102 | a003 | 8 => 24+align(4*8) = 56
  a11:  8 | 8 | a110 | a111 | a112 | a113 | 8 => 24+align(4*8) = 56
  a12:  8 | 8 | a120 | a121 | a122 | a123 | 8 => 24+align(4*8) = 56
  
*/

تخصيص دالة احجز_مصفوفة(الأبعاد:[كبير]، حجم_العنصر:كبير):كبير{
	
	متغير ن=0UL // عداد
	متغير م=الأبعاد[0UL] // سيمثل مضروب الأبعاد، ستتم عملية ضرب بعد واحد في كل مرة من العداد
	ثابت فهرس_آخر_بعد=الأبعاد.السعة-1UL // تعريفه هنا سيكون أسرع نوعاً ما على مستوى لغة التجميع
	ثابت فهرس_البعد_قبل_الأخير=فهرس_آخر_بعد-1UL // تعريفه هنا سيكون أسرع نوعاً ما على مستوى لغة التجميع
	
	/* نبدأ بحجم أول مصفوفة من المصفوفات، وهو 8 بايت لحجز مساحة لتخزين عدد العناصر، ثم الحجم المطلوب منها،
	دالة 'احجز(الحجم_بالبايت:كبير):كبير' ستقوم بإضافة 16 بايت في للبيانات الوصفية. */
	متغير الحجم_المطلوب=8L+الأبعاد[ن]*8L
	ثابت الحجم_المطلوب_في_آخر_بعد=24L+تنسيق_الحجم(الأبعاد[فهرس_آخر_بعد] *حجم_العنصر)
	
	طالما(ن++<فهرس_البعد_قبل_الأخير){
		الحجم_المطلوب+=م*(24L + الأبعاد[ن] * 8L) // حجم العنصر هو حجم العنوان في الذاكرة أي 8 بايت
		م*=الأبعاد[ن]
	}
	
	/*
	 * ضربنا في حجم_العنصر؛ لأنها آخر مصفوفة داخلية.
	 * ويمكن اعتبار تنفيذ الكود الذي فوق، فستكون ن=فهرس_البعد_قبل_الأخير وبعد الزيادة ستكون فهرس_آخر_بعد. */
	الحجم_المطلوب+=م*الحجم_المطلوب_في_آخر_بعد
	
	 // طباعة_(الحجم_المطلوب+16L) // قم بإضافة 16 بايت للبيانات الوصفية المُضافة من دالة 'احجز(الحجم_بالبايت:كبير):كبير' 
	 
	 متغير العنوان=احجز(الحجم_المطلوب)
	 
	 ن=0UL
	 م=1L
	 
	 متغير بداية_البعد=العنوان-8L
	 
	 طالما(ن<=فهرس_آخر_بعد){
	 	
		ثابت عدد_العناصر=الأبعاد[ن]
		ثابت الحجم_المطلوب=0L// الحجم المطلوب لكل مصفوفة في البعد الحالي
		ثابت الحجم_المطلوب_للبعد_التالي=0L // الحجم المطلوب لكل مصفوفة في البعد التالي
		متغير بداية_المصفوفة=بداية_البعد // بداية المصفوفة الحالية في البعد الحالي
		
		لو(ن==فهرس_آخر_بعد)
			الحجم_المطلوب=الحجم_المطلوب_في_آخر_بعد
		وإلا{
			الحجم_المطلوب=24L + عدد_العناصر * 8L
			لو(ن==فهرس_البعد_قبل_الأخير)
				الحجم_المطلوب_للبعد_التالي=الحجم_المطلوب_في_آخر_بعد
			وإلا
				الحجم_المطلوب_للبعد_التالي=24L + الأبعاد[ن+1UL] * 8L
		}
		
		ثابت البيانات_الوصفية=الحجم_المطلوب|1L
		ثابت نهاية_البعد=بداية_البعد+م*الحجم_المطلوب
		متغير عنوان_المصفوفة_للعنصر_الحالي=نهاية_البعد+8L // عنوان المصفوفة التي يشير إليها العنصر الحالي في المصفوفة الحالية، سيقوم بجعل العناصر كلها أصفار في آخر بعد، قمنا بإضافة 8 بايت لأنه العنوان بعد البيانات الوصفية
		
		لو(ن==فهرس_آخر_بعد)
			عنوان_المصفوفة_للعنصر_الحالي=0L
			
		طالما(بداية_المصفوفة<نهاية_البعد){
			
			ثابت نهاية_المصفوفة=(بداية_المصفوفة+الحجم_المطلوب-8L)
		 
			اكتب(بداية_المصفوفة، البيانات_الوصفية)
			اكتب(بداية_المصفوفة+8L، عدد_العناصر)
			اكتب(نهاية_المصفوفة، البيانات_الوصفية)
			
			متغير ر=بداية_المصفوفة+16L // عنوان العنصر الحالي في المصفوفة
			
			طالما(ر<نهاية_المصفوفة){
				اكتب(ر، عنوان_المصفوفة_للعنصر_الحالي)
				عنوان_المصفوفة_للعنصر_الحالي+=الحجم_المطلوب_للبعد_التالي // عند آخر بعد ستكون الزيادة هى قيمة الحجم_المطلوب_للبعد_التالي وهى صفر
				ر+=8L
			}
			
			بداية_المصفوفة+=الحجم_المطلوب
		
		}
		بداية_البعد=نهاية_البعد
	 	م*=الأبعاد[ن++]
	 }
	 
	أرجع العنوان
}